{"ast":null,"code":"var _jsxFileName = \"/home/monge/amomentintime/client/src/RangeStepInput.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { forceNumber } from './utils';\n/**\n * This is an <input type=range> that steps up and down on click\n * instead of jumping immediately to the new value.\n *\n * Based on zcorpan's solution here:\n *   https://stackoverflow.com/a/51988783/173630\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RangeStepInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMouseDown: false,\n      isDragging: false\n    };\n    this.onInput = this.onInput.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.domRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      ref: this.domRef,\n      className: this.props.className,\n      min: this.props.min,\n      max: this.props.max,\n      step: this.props.step,\n      value: this.props.value,\n      name: this.props.name,\n      id: this.props.id,\n      style: this.props.style,\n      disabled: this.props.disabled,\n      onChange: this.props.onChange,\n      onMouseDown: this.onMouseDown,\n      onMouseUp: this.onMouseUp,\n      onMouseMove: this.onMouseMove,\n      onClick: this.onClick,\n      onInput: this.onInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n  onMouseDown() {\n    this.setState({\n      isMouseDown: true\n    });\n\n    if (this.props.hold) {\n      if (this.holdLoop) {\n        clearInterval(this.holdLoop);\n      }\n\n      let oldVal = this.props.value;\n      const self = this;\n      setTimeout(function () {\n        if (self.holdLoop) {\n          clearInterval(self.holdLoop);\n        }\n\n        self.holdLoop = self.makeHoldLoop(oldVal); // Add some initial delay on the click-hold functionality.\n      }, 250);\n    }\n  }\n\n  onMouseUp() {\n    this.setState({\n      isMouseDown: false,\n      isDragging: false\n    });\n\n    if (this.holdLoop) {\n      clearInterval(this.holdLoop);\n    }\n  }\n\n  onMouseMove() {\n    if (this.state.isMouseDown) {\n      this.setState({\n        isDragging: true\n      });\n    }\n  }\n\n  onInput(e) {\n    const step = this.props.step;\n    const newVal = forceNumber(e.target.value);\n    const oldVal = this.props.value;\n\n    if ( // Disable the oninput filter with the user is dragging\n    // the slider's knob.\n    !(this.state.isMouseDown && this.state.isDragging) && oldVal) {\n      e.target.value = newVal > oldVal ? oldVal + step : oldVal - step;\n    }\n  }\n\n  makeHoldLoop(oldVal) {\n    const self = this;\n    return setInterval(function () {\n      if (!self.state.isMouseDown || self.state.isDragging) {\n        // The user isn't holding the cursor anymore, or the cursor\n        // is being dragged. Clean up and cancel.\n        if (self.holdLoop) {\n          clearInterval(self.holdLoop);\n        }\n\n        return false;\n      }\n\n      const input = self.domRef.current;\n      let newVal = self.props.value;\n\n      if (oldVal > newVal && newVal - self.props.step >= self.props.min) {\n        newVal -= self.props.step;\n      } else if (oldVal < newVal && newVal + self.props.step <= self.props.max) {\n        newVal += self.props.step;\n      }\n\n      if (oldVal === newVal) {\n        return false;\n      } // Directly setting input.value will cause the new value\n      // to not be recognized, because of React.\n      // https://stackoverflow.com/a/46012210/173630\n\n\n      const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;\n      nativeInputValueSetter.call(input, newVal); // Trigger an onChange event.\n\n      const e = new Event('change', {\n        bubbles: true\n      });\n      return input.dispatchEvent(e);\n    }, 100);\n  }\n\n}\n;\nRangeStepInput.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  step: PropTypes.number.isRequired,\n  className: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  disabled: PropTypes.bool,\n  style: PropTypes.string,\n  // Determines whether the slider changes value when the cursor is\n  // held on it.\n  hold: PropTypes.bool\n};\nRangeStepInput.defaultProps = {\n  hold: true\n};","map":{"version":3,"sources":["/home/monge/amomentintime/client/src/RangeStepInput.js"],"names":["React","PropTypes","forceNumber","RangeStepInput","Component","constructor","props","state","isMouseDown","isDragging","onInput","bind","onMouseDown","onMouseUp","onMouseMove","domRef","createRef","render","className","min","max","step","value","name","id","style","disabled","onChange","onClick","setState","hold","holdLoop","clearInterval","oldVal","self","setTimeout","makeHoldLoop","e","newVal","target","setInterval","input","current","nativeInputValueSetter","Object","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","Event","bubbles","dispatchEvent","propTypes","number","isRequired","func","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {forceNumber} from './utils';\n\n/**\n * This is an <input type=range> that steps up and down on click\n * instead of jumping immediately to the new value.\n *\n * Based on zcorpan's solution here:\n *   https://stackoverflow.com/a/51988783/173630\n */\nexport default class RangeStepInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isMouseDown: false,\n            isDragging: false\n        };\n        this.onInput = this.onInput.bind(this);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n\n        this.domRef = React.createRef();\n    }\n    render() {\n        return <input\n                   type=\"range\"\n                   ref={this.domRef}\n                   className={this.props.className}\n                   min={this.props.min}\n                   max={this.props.max}\n                   step={this.props.step}\n                   value={this.props.value}\n                   name={this.props.name}\n                   id={this.props.id}\n                   style={this.props.style}\n                   disabled={this.props.disabled}\n                   onChange={this.props.onChange}\n                   onMouseDown={this.onMouseDown}\n                   onMouseUp={this.onMouseUp}\n                   onMouseMove={this.onMouseMove}\n                   onClick={this.onClick}\n                   onInput={this.onInput} />;\n    }\n    onMouseDown() {\n        this.setState({isMouseDown: true});\n\n        if (this.props.hold) {\n            if (this.holdLoop) {\n                clearInterval(this.holdLoop);\n            }\n\n            let oldVal = this.props.value;\n\n            const self = this;\n            setTimeout(function() {\n                if (self.holdLoop) {\n                    clearInterval(self.holdLoop);\n                }\n                self.holdLoop = self.makeHoldLoop(oldVal);\n            // Add some initial delay on the click-hold functionality.\n            }, 250);\n        }\n    }\n    onMouseUp() {\n        this.setState({\n            isMouseDown: false,\n            isDragging: false\n        });\n\n        if (this.holdLoop) {\n            clearInterval(this.holdLoop);\n        }\n    }\n    onMouseMove() {\n        if (this.state.isMouseDown) {\n            this.setState({isDragging: true});\n        }\n    }\n    onInput(e) {\n        const step = this.props.step;\n        const newVal = forceNumber(e.target.value);\n        const oldVal = this.props.value;\n\n        if (\n            // Disable the oninput filter with the user is dragging\n            // the slider's knob.\n            !(this.state.isMouseDown && this.state.isDragging) &&\n            oldVal\n        ) {\n            e.target.value = (newVal > oldVal) ?\n                             oldVal + step : oldVal - step;\n        }\n    }\n    makeHoldLoop(oldVal) {\n        const self = this;\n\n        return setInterval(function() {\n            if (!self.state.isMouseDown || self.state.isDragging) {\n                // The user isn't holding the cursor anymore, or the cursor\n                // is being dragged. Clean up and cancel.\n                if (self.holdLoop) {\n                    clearInterval(self.holdLoop);\n                }\n                return false;\n            }\n\n            const input = self.domRef.current;\n            let newVal = self.props.value;\n\n            if (\n                oldVal > newVal &&\n                (newVal - self.props.step) >= self.props.min\n            ) {\n                newVal -= self.props.step;\n            } else if (\n                oldVal < newVal &&\n                (newVal + self.props.step) <= self.props.max\n            ) {\n                newVal += self.props.step;\n            }\n\n            if (oldVal === newVal) {\n                return false;\n            }\n\n            // Directly setting input.value will cause the new value\n            // to not be recognized, because of React.\n            // https://stackoverflow.com/a/46012210/173630\n            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n                window.HTMLInputElement.prototype, 'value').set;\n            nativeInputValueSetter.call(input, newVal);\n\n            // Trigger an onChange event.\n            const e = new Event('change', {bubbles: true});\n\n            return input.dispatchEvent(e);\n        }, 100);\n    }\n};\n\nRangeStepInput.propTypes = {\n    value: PropTypes.number.isRequired,\n    onChange: PropTypes.func.isRequired,\n    step: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    disabled: PropTypes.bool,\n    style: PropTypes.string,\n\n    // Determines whether the slider changes value when the cursor is\n    // held on it.\n    hold: PropTypes.bool\n};\n\nRangeStepInput.defaultProps = {\n    hold: true\n};\n"]},"metadata":{},"sourceType":"module"}